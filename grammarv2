grammar PGrammar;



INTEGER: [1-9][0-9]*;
DOUBLE: INTEGER DOT INTEGER;

TRUE: 'true';
FALSE: 'false';

INT_T: 'int';
DOUBLE_T: 'double';
VOID_T: 'void';
BOOLEAN_T: 'boolean';

RETURN: 'return';
IF: 'if';
ELSE: 'else';
WHILE: 'while';
PLUSPLUS: '++';
MINUSMINUS: '--';
MINUS: '-';
EXCLEM: '!';
TIMES: '*';
DEVIDE: '/';
MOD: '%';
PLUS: '+';
LT: '<';
GT:'>';
LE: '<=';
GE: '>=';
EQ: '==';
NE: '!=';
LOG_AND: '&&';
LOG_OR: '||';
DOT: '.';
O_B: '{';
C_B: '}';
O_P: '(';
X_P: ')';
SC: ';';
ASSIGN: '=';
COMMA: ',';
EMPTY: ' ';
ID: [a-zA-Z_] [a-zA-Z_0-9]* {
	if (getText().equals("true") ||
	    getText().equals("false") ||
	    getText().equals("int") ||
		getText().equals("double") ||
		getText().equals("void") ||
		getText().equals("boolean") ||
		getText().equals("if") ||
		getText().equals("else") ||
		getText().equals("while") ||
		getText().equals("return")){
			System.err.println("Error");
		}
};



program: functions;
functions: function functions
| function;
function: type ID O_P arguments C_P block
| type ID O_P C_P block;
arguments: argument COMMA arguments
| argument;
argument: type ID;
type: INT_T
| DOUBLE_T
| BOOLEAN_T
| VOID_T;
block: O_B statements C_B;
statements: statement statements
| EMPTY;
statement : ;
| block
| type items
| identifier = expression ;
| ⟨identifier⟩ ++ ;
| identifier -- ;
| return ;
| return expression ;
| if ( expression ) statement
| if ( expression ) statement else statement
| while ( expression ) statement
| expression ;
items : items item
| item
item : identifier
| identifier = expression
⟨expression⟩ ::= ⟨integer⟩
| ⟨double⟩
| ⟨identifier⟩
| true
| false
| ⟨string⟩
| ⟨identifier⟩ ( )
| ⟨identifier⟩ ( ⟨parameters⟩ )
| ( ⟨expression⟩ )
| ⟨unary-operator⟩ ⟨expression⟩
| ⟨expression⟩ ⟨binary-operator⟩ ⟨expression⟩
⟨parameters⟩ ::= ⟨expression⟩ , ⟨parameters⟩
| ⟨expression⟩
⟨unary-operator⟩ ::= - | !
⟨binary-operator⟩ ::= * | / | % | + | - | < | > | <= | >= | == | != | && | ||

